// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/eventdance.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	"github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIEventDanceRepository is a mock of IEventDanceRepository interface
type MockIEventDanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEventDanceRepositoryMockRecorder
}

// MockIEventDanceRepositoryMockRecorder is the mock recorder for MockIEventDanceRepository
type MockIEventDanceRepositoryMockRecorder struct {
	mock *MockIEventDanceRepository
}

// NewMockIEventDanceRepository creates a new mock instance
func NewMockIEventDanceRepository(ctrl *gomock.Controller) *MockIEventDanceRepository {
	mock := &MockIEventDanceRepository{ctrl: ctrl}
	mock.recorder = &MockIEventDanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventDanceRepository) EXPECT() *MockIEventDanceRepositoryMockRecorder {
	return m.recorder
}

// SearchEventDance mocks base method
func (m *MockIEventDanceRepository) SearchEventDance(criteria businesslogic.SearchEventDanceCriteria) ([]businesslogic.EventDance, error) {
	ret := m.ctrl.Call(m, "SearchEventDance", criteria)
	ret0, _ := ret[0].([]businesslogic.EventDance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventDance indicates an expected call of SearchEventDance
func (mr *MockIEventDanceRepositoryMockRecorder) SearchEventDance(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventDance", reflect.TypeOf((*MockIEventDanceRepository)(nil).SearchEventDance), criteria)
}

// CreateEventDance mocks base method
func (m *MockIEventDanceRepository) CreateEventDance(eventDance *businesslogic.EventDance) error {
	ret := m.ctrl.Call(m, "CreateEventDance", eventDance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventDance indicates an expected call of CreateEventDance
func (mr *MockIEventDanceRepositoryMockRecorder) CreateEventDance(eventDance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDance", reflect.TypeOf((*MockIEventDanceRepository)(nil).CreateEventDance), eventDance)
}

// DeleteEventDance mocks base method
func (m *MockIEventDanceRepository) DeleteEventDance(eventDance businesslogic.EventDance) error {
	ret := m.ctrl.Call(m, "DeleteEventDance", eventDance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventDance indicates an expected call of DeleteEventDance
func (mr *MockIEventDanceRepositoryMockRecorder) DeleteEventDance(eventDance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventDance", reflect.TypeOf((*MockIEventDanceRepository)(nil).DeleteEventDance), eventDance)
}

// UpdateEventDance mocks base method
func (m *MockIEventDanceRepository) UpdateEventDance(eventDance businesslogic.EventDance) error {
	ret := m.ctrl.Call(m, "UpdateEventDance", eventDance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventDance indicates an expected call of UpdateEventDance
func (mr *MockIEventDanceRepositoryMockRecorder) UpdateEventDance(eventDance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDance", reflect.TypeOf((*MockIEventDanceRepository)(nil).UpdateEventDance), eventDance)
}
