// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/reference/dance.go

// Package mock_reference is a generated GoMock package.
package mock_reference

import (
	reference "github.com/DancesportSoftware/das/businesslogic/reference"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIDanceRepository is a mock of IDanceRepository interface
type MockIDanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDanceRepositoryMockRecorder
}

// MockIDanceRepositoryMockRecorder is the mock recorder for MockIDanceRepository
type MockIDanceRepositoryMockRecorder struct {
	mock *MockIDanceRepository
}

// NewMockIDanceRepository creates a new mock instance
func NewMockIDanceRepository(ctrl *gomock.Controller) *MockIDanceRepository {
	mock := &MockIDanceRepository{ctrl: ctrl}
	mock.recorder = &MockIDanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDanceRepository) EXPECT() *MockIDanceRepositoryMockRecorder {
	return m.recorder
}

// CreateDance mocks base method
func (m *MockIDanceRepository) CreateDance(dance *reference.Dance) error {
	ret := m.ctrl.Call(m, "CreateDance", dance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDance indicates an expected call of CreateDance
func (mr *MockIDanceRepositoryMockRecorder) CreateDance(dance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDance", reflect.TypeOf((*MockIDanceRepository)(nil).CreateDance), dance)
}

// SearchDance mocks base method
func (m *MockIDanceRepository) SearchDance(criteria reference.SearchDanceCriteria) ([]reference.Dance, error) {
	ret := m.ctrl.Call(m, "SearchDance", criteria)
	ret0, _ := ret[0].([]reference.Dance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDance indicates an expected call of SearchDance
func (mr *MockIDanceRepositoryMockRecorder) SearchDance(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDance", reflect.TypeOf((*MockIDanceRepository)(nil).SearchDance), criteria)
}

// UpdateDance mocks base method
func (m *MockIDanceRepository) UpdateDance(dance reference.Dance) error {
	ret := m.ctrl.Call(m, "UpdateDance", dance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDance indicates an expected call of UpdateDance
func (mr *MockIDanceRepositoryMockRecorder) UpdateDance(dance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDance", reflect.TypeOf((*MockIDanceRepository)(nil).UpdateDance), dance)
}

// DeleteDance mocks base method
func (m *MockIDanceRepository) DeleteDance(dance reference.Dance) error {
	ret := m.ctrl.Call(m, "DeleteDance", dance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDance indicates an expected call of DeleteDance
func (mr *MockIDanceRepositoryMockRecorder) DeleteDance(dance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDance", reflect.TypeOf((*MockIDanceRepository)(nil).DeleteDance), dance)
}
