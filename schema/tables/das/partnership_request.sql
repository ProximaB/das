CREATE TABLE IF NOT EXISTS DAS.PARTNERSHIP_REQUEST (
  ID SERIAL NOT NULL PRIMARY KEY ,
  SENDER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  RECIPIENT_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  SENDER_ROLE INTEGER NOT NULL REFERENCES DAS.PARTNERSHIP_ROLE (ID),
  RECIPIENT_ROLE INTEGER NOT NULL REFERENCES DAS.PARTNERSHIP_ROLE (ID),
  MESSAGE TEXT,
  REQUEST_STATUS INTEGER NOT NULL REFERENCES DAS.PARTNERSHIP_REQUEST_STATUS(ID),
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT(ID),
  DATETIME_CREATED TIMESTAMP NOt NULL DEFAULT NOW (),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT(ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX ON DAS.PARTNERSHIP_REQUEST (SENDER_ID);
CREATE INDEX ON DAS.PARTNERSHIP_REQUEST (RECIPIENT_ID);
CREATE INDEX ON DAS.PARTNERSHIP_REQUEST (CREATE_USER_ID);
CREATE INDEX ON DAS.PARTNERSHIP_REQUEST (UPDATE_USER_ID);
CREATE INDEX ON DAS.PARTNERSHIP_REQUEST (REQUEST_STATUS);

-- Get_Received_Partnership_Requests returns a table of partnership request by the recipient ID
DROP FUNCTION IF EXISTS get_received_partnership_requests(receiverID INTEGER);
CREATE OR REPLACE FUNCTION get_received_partnership_requests (receiverID INTEGER)
RETURNS TABLE (
                REQUEST_ID INTEGER,
                SENDER INTEGER,
                SENDER_FIRST_NAME VARCHAR(64),
                SENDER_LAST_NAME VARCHAR(64),
                SENDER_EMAIL TEXT,
                SENDER_ROLE INTEGER,
                RECIPIENT INTEGER,
                RECIPIENT_FIRST_NAME VARCHAR(64),
                RECIPIENT_LAST_NAME VARCHAR(64),
                RECIPIENT_EMAIL TEXT,
                RECIPIENT_ROLE INTEGER,
                MESSAGE TEXT,
                REQUEST_STATUE INTEGER,
                CREATE_USER_ID INTEGER,
                DATETIME_CREATED TIMESTAMP,
                UPDATE_USER_ID INTEGER,
                DATETIME_UPDATED TIMESTAMP
              )
AS
$$
  BEGIN
    RETURN QUERY
      SELECT
             DAS.PARTNERSHIP_REQUEST.ID,
             DAS.PARTNERSHIP_REQUEST.SENDER_ID,
             SENDER.FIRST_NAME,
             SENDER.LAST_NAME,
             SENDER.EMAIL,
             DAS.PARTNERSHIP_REQUEST.SENDER_ROLE,
             DAS.PARTNERSHIP_REQUEST.RECIPIENT_ID,
             RECEIPIENT.FIRST_NAME,
             RECEIPIENT.LAST_NAME,
             RECEIPIENT.EMAIL,
             DAS.PARTNERSHIP_REQUEST.RECIPIENT_ROLE,
             DAS.PARTNERSHIP_REQUEST.MESSAGE,
             DAS.PARTNERSHIP_REQUEST.REQUEST_STATUS,
             DAS.PARTNERSHIP_REQUEST.CREATE_USER_ID,
             DAS.PARTNERSHIP_REQUEST.DATETIME_UPDATED,
             DAS.PARTNERSHIP_REQUEST.UPDATE_USER_ID,
             DAS.PARTNERSHIP_REQUEST.DATETIME_UPDATED
      FROM DAS.PARTNERSHIP_REQUEST
      JOIN DAS.ACCOUNT SENDER ON DAS.PARTNERSHIP_REQUEST.SENDER_ID = SENDER.ID
      JOIN DAS.ACCOUNT RECEIPIENT ON DAS.PARTNERSHIP_REQUEST.RECIPIENT_ID = RECEIPIENT.ID
    WHERE DAS.PARTNERSHIP_REQUEST.RECIPIENT_ID = receiverID;
  END;
$$
  LANGUAGE PLPGSQL;

-- Get_Sent_Partnership_Requests returns a table of partnership request by the recipient ID
DROP FUNCTION IF EXISTS get_sent_partnership_requests(senderID INTEGER);
CREATE OR REPLACE FUNCTION get_sent_partnership_requests (senderId INTEGER)
RETURNS TABLE (
                REQUEST_ID INTEGER,
                SENDER INTEGER,
                SENDER_FIRST_NAME VARCHAR(64),
                SENDER_LAST_NAME VARCHAR(64),
                SENDER_EMAIL TEXT,
                SENDER_ROLE INTEGER,
                RECIPIENT INTEGER,
                RECIPIENT_FIRST_NAME VARCHAR(64),
                RECIPIENT_LAST_NAME VARCHAR(64),
                RECIPIENT_EMAIL TEXT,
                RECIPIENT_ROLE INTEGER,
                MESSAGE TEXT,
                REQUEST_STATUE INTEGER,
                CREATE_USER_ID INTEGER,
                DATETIME_CREATED TIMESTAMP,
                UPDATE_USER_ID INTEGER,
                DATETIME_UPDATED TIMESTAMP
              )
AS
$$
  BEGIN
    RETURN QUERY
      SELECT
             DAS.PARTNERSHIP_REQUEST.ID,
             DAS.PARTNERSHIP_REQUEST.SENDER_ID,
             SENDER.FIRST_NAME,
             SENDER.LAST_NAME,
             SENDER.EMAIL,
             DAS.PARTNERSHIP_REQUEST.SENDER_ROLE,
             DAS.PARTNERSHIP_REQUEST.RECIPIENT_ID,
             RECEIPIENT.FIRST_NAME,
             RECEIPIENT.LAST_NAME,
             RECEIPIENT.EMAIL,
             DAS.PARTNERSHIP_REQUEST.RECIPIENT_ROLE,
             DAS.PARTNERSHIP_REQUEST.MESSAGE,
             DAS.PARTNERSHIP_REQUEST.REQUEST_STATUS,
             DAS.PARTNERSHIP_REQUEST.CREATE_USER_ID,
             DAS.PARTNERSHIP_REQUEST.DATETIME_UPDATED,
             DAS.PARTNERSHIP_REQUEST.UPDATE_USER_ID,
             DAS.PARTNERSHIP_REQUEST.DATETIME_UPDATED
      FROM DAS.PARTNERSHIP_REQUEST
      JOIN DAS.ACCOUNT SENDER ON DAS.PARTNERSHIP_REQUEST.SENDER_ID = SENDER.ID
      JOIN DAS.ACCOUNT RECEIPIENT ON DAS.PARTNERSHIP_REQUEST.RECIPIENT_ID = RECEIPIENT.ID
    WHERE DAS.PARTNERSHIP_REQUEST.SENDER_ID = senderId AND DAS.PARTNERSHIP_REQUEST.CREATE_USER_ID = senderId;
  END;
$$
  LANGUAGE PLPGSQL;