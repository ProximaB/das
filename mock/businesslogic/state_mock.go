// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/state.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIStateRepository is a mock of IStateRepository interface
type MockIStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStateRepositoryMockRecorder
}

// MockIStateRepositoryMockRecorder is the mock recorder for MockIStateRepository
type MockIStateRepositoryMockRecorder struct {
	mock *MockIStateRepository
}

// NewMockIStateRepository creates a new mock instance
func NewMockIStateRepository(ctrl *gomock.Controller) *MockIStateRepository {
	mock := &MockIStateRepository{ctrl: ctrl}
	mock.recorder = &MockIStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStateRepository) EXPECT() *MockIStateRepositoryMockRecorder {
	return m.recorder
}

// CreateState mocks base method
func (m *MockIStateRepository) CreateState(state *businesslogic.State) error {
	ret := m.ctrl.Call(m, "CreateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateState indicates an expected call of CreateState
func (mr *MockIStateRepositoryMockRecorder) CreateState(state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateState", reflect.TypeOf((*MockIStateRepository)(nil).CreateState), state)
}

// SearchState mocks base method
func (m *MockIStateRepository) SearchState(criteria businesslogic.SearchStateCriteria) ([]businesslogic.State, error) {
	ret := m.ctrl.Call(m, "SearchState", criteria)
	ret0, _ := ret[0].([]businesslogic.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchState indicates an expected call of SearchState
func (mr *MockIStateRepositoryMockRecorder) SearchState(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchState", reflect.TypeOf((*MockIStateRepository)(nil).SearchState), criteria)
}

// UpdateState mocks base method
func (m *MockIStateRepository) UpdateState(state businesslogic.State) error {
	ret := m.ctrl.Call(m, "UpdateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockIStateRepositoryMockRecorder) UpdateState(state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockIStateRepository)(nil).UpdateState), state)
}

// DeleteState mocks base method
func (m *MockIStateRepository) DeleteState(state businesslogic.State) error {
	ret := m.ctrl.Call(m, "DeleteState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteState indicates an expected call of DeleteState
func (mr *MockIStateRepositoryMockRecorder) DeleteState(state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockIStateRepository)(nil).DeleteState), state)
}
