// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/competitionrules.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRule is a mock of IRule interface
type MockIRule struct {
	ctrl     *gomock.Controller
	recorder *MockIRuleMockRecorder
}

// MockIRuleMockRecorder is the mock recorder for MockIRule
type MockIRuleMockRecorder struct {
	mock *MockIRule
}

// NewMockIRule creates a new mock instance
func NewMockIRule(ctrl *gomock.Controller) *MockIRule {
	mock := &MockIRule{ctrl: ctrl}
	mock.recorder = &MockIRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRule) EXPECT() *MockIRuleMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockIRule) Apply(registration businesslogic.EventRegistration) error {
	ret := m.ctrl.Call(m, "Apply", registration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockIRuleMockRecorder) Apply(registration interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIRule)(nil).Apply), registration)
}
