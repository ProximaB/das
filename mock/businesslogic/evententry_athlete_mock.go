// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/evententry_athlete.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAthleteEventEntryRepository is a mock of IAthleteEventEntryRepository interface
type MockIAthleteEventEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAthleteEventEntryRepositoryMockRecorder
}

// MockIAthleteEventEntryRepositoryMockRecorder is the mock recorder for MockIAthleteEventEntryRepository
type MockIAthleteEventEntryRepositoryMockRecorder struct {
	mock *MockIAthleteEventEntryRepository
}

// NewMockIAthleteEventEntryRepository creates a new mock instance
func NewMockIAthleteEventEntryRepository(ctrl *gomock.Controller) *MockIAthleteEventEntryRepository {
	mock := &MockIAthleteEventEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIAthleteEventEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAthleteEventEntryRepository) EXPECT() *MockIAthleteEventEntryRepositoryMockRecorder {
	return m.recorder
}

// CreateAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) CreateAthleteEventEntry(entry *businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "CreateAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAthleteEventEntry indicates an expected call of CreateAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) CreateAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).CreateAthleteEventEntry), entry)
}

// DeleteAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) DeleteAthleteEventEntry(entry businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "DeleteAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAthleteEventEntry indicates an expected call of DeleteAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) DeleteAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).DeleteAthleteEventEntry), entry)
}

// SearchAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) SearchAthleteEventEntry(criteria businesslogic.SearchAthleteEventEntryCriteria) ([]businesslogic.AthleteEventEntry, error) {
	ret := m.ctrl.Call(m, "SearchAthleteEventEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.AthleteEventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAthleteEventEntry indicates an expected call of SearchAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) SearchAthleteEventEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).SearchAthleteEventEntry), criteria)
}

// UpdateAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) UpdateAthleteEventEntry(entry businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "UpdateAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAthleteEventEntry indicates an expected call of UpdateAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) UpdateAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).UpdateAthleteEventEntry), entry)
}
