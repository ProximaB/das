// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/event_template.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICompetitionEventTemplateRepository is a mock of ICompetitionEventTemplateRepository interface
type MockICompetitionEventTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompetitionEventTemplateRepositoryMockRecorder
}

// MockICompetitionEventTemplateRepositoryMockRecorder is the mock recorder for MockICompetitionEventTemplateRepository
type MockICompetitionEventTemplateRepositoryMockRecorder struct {
	mock *MockICompetitionEventTemplateRepository
}

// NewMockICompetitionEventTemplateRepository creates a new mock instance
func NewMockICompetitionEventTemplateRepository(ctrl *gomock.Controller) *MockICompetitionEventTemplateRepository {
	mock := &MockICompetitionEventTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockICompetitionEventTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICompetitionEventTemplateRepository) EXPECT() *MockICompetitionEventTemplateRepositoryMockRecorder {
	return m.recorder
}

// SearchCompetitionEventTemplates mocks base method
func (m *MockICompetitionEventTemplateRepository) SearchCompetitionEventTemplates(criteria businesslogic.SearchCompetitionEventTemplateCriteria) ([]businesslogic.CompetitionEventTemplate, error) {
	ret := m.ctrl.Call(m, "SearchCompetitionEventTemplates", criteria)
	ret0, _ := ret[0].([]businesslogic.CompetitionEventTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCompetitionEventTemplates indicates an expected call of SearchCompetitionEventTemplates
func (mr *MockICompetitionEventTemplateRepositoryMockRecorder) SearchCompetitionEventTemplates(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCompetitionEventTemplates", reflect.TypeOf((*MockICompetitionEventTemplateRepository)(nil).SearchCompetitionEventTemplates), criteria)
}
