// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/provisionhistory.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIOrganizerProvisionHistoryRepository is a mock of IOrganizerProvisionHistoryRepository interface
type MockIOrganizerProvisionHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizerProvisionHistoryRepositoryMockRecorder
}

// MockIOrganizerProvisionHistoryRepositoryMockRecorder is the mock recorder for MockIOrganizerProvisionHistoryRepository
type MockIOrganizerProvisionHistoryRepositoryMockRecorder struct {
	mock *MockIOrganizerProvisionHistoryRepository
}

// NewMockIOrganizerProvisionHistoryRepository creates a new mock instance
func NewMockIOrganizerProvisionHistoryRepository(ctrl *gomock.Controller) *MockIOrganizerProvisionHistoryRepository {
	mock := &MockIOrganizerProvisionHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockIOrganizerProvisionHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOrganizerProvisionHistoryRepository) EXPECT() *MockIOrganizerProvisionHistoryRepositoryMockRecorder {
	return m.recorder
}

// SearchOrganizerProvisionHistory mocks base method
func (m *MockIOrganizerProvisionHistoryRepository) SearchOrganizerProvisionHistory(criteria businesslogic.SearchOrganizerProvisionHistoryCriteria) ([]businesslogic.OrganizerProvisionHistoryEntry, error) {
	ret := m.ctrl.Call(m, "SearchOrganizerProvisionHistory", criteria)
	ret0, _ := ret[0].([]businesslogic.OrganizerProvisionHistoryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrganizerProvisionHistory indicates an expected call of SearchOrganizerProvisionHistory
func (mr *MockIOrganizerProvisionHistoryRepositoryMockRecorder) SearchOrganizerProvisionHistory(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizerProvisionHistory", reflect.TypeOf((*MockIOrganizerProvisionHistoryRepository)(nil).SearchOrganizerProvisionHistory), criteria)
}

// UpdateOrganizerProvisionHistory mocks base method
func (m *MockIOrganizerProvisionHistoryRepository) UpdateOrganizerProvisionHistory(history businesslogic.OrganizerProvisionHistoryEntry) error {
	ret := m.ctrl.Call(m, "UpdateOrganizerProvisionHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganizerProvisionHistory indicates an expected call of UpdateOrganizerProvisionHistory
func (mr *MockIOrganizerProvisionHistoryRepositoryMockRecorder) UpdateOrganizerProvisionHistory(history interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizerProvisionHistory", reflect.TypeOf((*MockIOrganizerProvisionHistoryRepository)(nil).UpdateOrganizerProvisionHistory), history)
}

// DeleteOrganizerProvisionHistory mocks base method
func (m *MockIOrganizerProvisionHistoryRepository) DeleteOrganizerProvisionHistory(history businesslogic.OrganizerProvisionHistoryEntry) error {
	ret := m.ctrl.Call(m, "DeleteOrganizerProvisionHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizerProvisionHistory indicates an expected call of DeleteOrganizerProvisionHistory
func (mr *MockIOrganizerProvisionHistoryRepositoryMockRecorder) DeleteOrganizerProvisionHistory(history interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizerProvisionHistory", reflect.TypeOf((*MockIOrganizerProvisionHistoryRepository)(nil).DeleteOrganizerProvisionHistory), history)
}

// CreateOrganizerProvisionHistory mocks base method
func (m *MockIOrganizerProvisionHistoryRepository) CreateOrganizerProvisionHistory(history *businesslogic.OrganizerProvisionHistoryEntry) error {
	ret := m.ctrl.Call(m, "CreateOrganizerProvisionHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizerProvisionHistory indicates an expected call of CreateOrganizerProvisionHistory
func (mr *MockIOrganizerProvisionHistoryRepositoryMockRecorder) CreateOrganizerProvisionHistory(history interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizerProvisionHistory", reflect.TypeOf((*MockIOrganizerProvisionHistoryRepository)(nil).CreateOrganizerProvisionHistory), history)
}
