// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/profile.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	"github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAthleteProfileRepository is a mock of IAthleteProfileRepository interface
type MockIAthleteProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAthleteProfileRepositoryMockRecorder
}

// MockIAthleteProfileRepositoryMockRecorder is the mock recorder for MockIAthleteProfileRepository
type MockIAthleteProfileRepositoryMockRecorder struct {
	mock *MockIAthleteProfileRepository
}

// NewMockIAthleteProfileRepository creates a new mock instance
func NewMockIAthleteProfileRepository(ctrl *gomock.Controller) *MockIAthleteProfileRepository {
	mock := &MockIAthleteProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIAthleteProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAthleteProfileRepository) EXPECT() *MockIAthleteProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIAthleteProfileRepository) CreateProfile(profile *businesslogic.AthleteProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIAthleteProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIAthleteProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIAthleteProfileRepository) UpdateProfile(profile businesslogic.AthleteProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIAthleteProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIAthleteProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIAthleteProfileRepository) SearchProfile(criteria businesslogic.SearchAthleteProfileCriteria) ([]businesslogic.AthleteProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.AthleteProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIAthleteProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIAthleteProfileRepository)(nil).SearchProfile), criteria)
}

// MockIAdjudicatorProfileRepository is a mock of IAdjudicatorProfileRepository interface
type MockIAdjudicatorProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdjudicatorProfileRepositoryMockRecorder
}

// MockIAdjudicatorProfileRepositoryMockRecorder is the mock recorder for MockIAdjudicatorProfileRepository
type MockIAdjudicatorProfileRepositoryMockRecorder struct {
	mock *MockIAdjudicatorProfileRepository
}

// NewMockIAdjudicatorProfileRepository creates a new mock instance
func NewMockIAdjudicatorProfileRepository(ctrl *gomock.Controller) *MockIAdjudicatorProfileRepository {
	mock := &MockIAdjudicatorProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIAdjudicatorProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAdjudicatorProfileRepository) EXPECT() *MockIAdjudicatorProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIAdjudicatorProfileRepository) CreateProfile(profile *businesslogic.AdjudicatorProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIAdjudicatorProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIAdjudicatorProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIAdjudicatorProfileRepository) UpdateProfile(profile businesslogic.AdjudicatorProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIAdjudicatorProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIAdjudicatorProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIAdjudicatorProfileRepository) SearchProfile(criteria businesslogic.SearchAdjudicatorProfileCriteria) ([]businesslogic.AdjudicatorProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.AdjudicatorProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIAdjudicatorProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIAdjudicatorProfileRepository)(nil).SearchProfile), criteria)
}

// MockIOrganizerProfileRepository is a mock of IOrganizerProfileRepository interface
type MockIOrganizerProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizerProfileRepositoryMockRecorder
}

// MockIOrganizerProfileRepositoryMockRecorder is the mock recorder for MockIOrganizerProfileRepository
type MockIOrganizerProfileRepositoryMockRecorder struct {
	mock *MockIOrganizerProfileRepository
}

// NewMockIOrganizerProfileRepository creates a new mock instance
func NewMockIOrganizerProfileRepository(ctrl *gomock.Controller) *MockIOrganizerProfileRepository {
	mock := &MockIOrganizerProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIOrganizerProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOrganizerProfileRepository) EXPECT() *MockIOrganizerProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIOrganizerProfileRepository) CreateProfile(profile *businesslogic.OrganizerProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIOrganizerProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIOrganizerProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIOrganizerProfileRepository) UpdateProfile(profile businesslogic.OrganizerProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIOrganizerProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIOrganizerProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIOrganizerProfileRepository) SearchProfile(criteria businesslogic.SearchOrganizerProfileCriteria) ([]businesslogic.OrganizerProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.OrganizerProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIOrganizerProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIOrganizerProfileRepository)(nil).SearchProfile), criteria)
}

// MockIScrutineerProfileRepository is a mock of IScrutineerProfileRepository interface
type MockIScrutineerProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIScrutineerProfileRepositoryMockRecorder
}

// MockIScrutineerProfileRepositoryMockRecorder is the mock recorder for MockIScrutineerProfileRepository
type MockIScrutineerProfileRepositoryMockRecorder struct {
	mock *MockIScrutineerProfileRepository
}

// NewMockIScrutineerProfileRepository creates a new mock instance
func NewMockIScrutineerProfileRepository(ctrl *gomock.Controller) *MockIScrutineerProfileRepository {
	mock := &MockIScrutineerProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIScrutineerProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIScrutineerProfileRepository) EXPECT() *MockIScrutineerProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIScrutineerProfileRepository) CreateProfile(profile *businesslogic.ScrutineerProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIScrutineerProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIScrutineerProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIScrutineerProfileRepository) UpdateProfile(profile businesslogic.ScrutineerProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIScrutineerProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIScrutineerProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIScrutineerProfileRepository) SearchProfile(criteria businesslogic.SearchScrutineerProfileCriteria) ([]businesslogic.ScrutineerProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.ScrutineerProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIScrutineerProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIScrutineerProfileRepository)(nil).SearchProfile), criteria)
}

// MockIDeckCaptainProfileRepository is a mock of IDeckCaptainProfileRepository interface
type MockIDeckCaptainProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDeckCaptainProfileRepositoryMockRecorder
}

// MockIDeckCaptainProfileRepositoryMockRecorder is the mock recorder for MockIDeckCaptainProfileRepository
type MockIDeckCaptainProfileRepositoryMockRecorder struct {
	mock *MockIDeckCaptainProfileRepository
}

// NewMockIDeckCaptainProfileRepository creates a new mock instance
func NewMockIDeckCaptainProfileRepository(ctrl *gomock.Controller) *MockIDeckCaptainProfileRepository {
	mock := &MockIDeckCaptainProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIDeckCaptainProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDeckCaptainProfileRepository) EXPECT() *MockIDeckCaptainProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIDeckCaptainProfileRepository) CreateProfile(profile *businesslogic.DeckCaptainProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIDeckCaptainProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIDeckCaptainProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIDeckCaptainProfileRepository) UpdateProfile(profile businesslogic.DeckCaptainProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIDeckCaptainProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIDeckCaptainProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIDeckCaptainProfileRepository) SearchProfile(criteria businesslogic.SearchDeckCaptainProfileCriteria) ([]businesslogic.DeckCaptainProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.DeckCaptainProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIDeckCaptainProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIDeckCaptainProfileRepository)(nil).SearchProfile), criteria)
}

// MockIEmceeProfileRepository is a mock of IEmceeProfileRepository interface
type MockIEmceeProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEmceeProfileRepositoryMockRecorder
}

// MockIEmceeProfileRepositoryMockRecorder is the mock recorder for MockIEmceeProfileRepository
type MockIEmceeProfileRepositoryMockRecorder struct {
	mock *MockIEmceeProfileRepository
}

// NewMockIEmceeProfileRepository creates a new mock instance
func NewMockIEmceeProfileRepository(ctrl *gomock.Controller) *MockIEmceeProfileRepository {
	mock := &MockIEmceeProfileRepository{ctrl: ctrl}
	mock.recorder = &MockIEmceeProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEmceeProfileRepository) EXPECT() *MockIEmceeProfileRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockIEmceeProfileRepository) CreateProfile(profile *businesslogic.EmceeProfile) error {
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockIEmceeProfileRepositoryMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIEmceeProfileRepository)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockIEmceeProfileRepository) UpdateProfile(profile businesslogic.EmceeProfile) error {
	ret := m.ctrl.Call(m, "UpdateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockIEmceeProfileRepositoryMockRecorder) UpdateProfile(profile interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIEmceeProfileRepository)(nil).UpdateProfile), profile)
}

// SearchProfile mocks base method
func (m *MockIEmceeProfileRepository) SearchProfile(criteria businesslogic.SearchEmceeProfileCriteria) ([]businesslogic.EmceeProfile, error) {
	ret := m.ctrl.Call(m, "SearchProfile", criteria)
	ret0, _ := ret[0].([]businesslogic.EmceeProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfile indicates an expected call of SearchProfile
func (mr *MockIEmceeProfileRepositoryMockRecorder) SearchProfile(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfile", reflect.TypeOf((*MockIEmceeProfileRepository)(nil).SearchProfile), criteria)
}
