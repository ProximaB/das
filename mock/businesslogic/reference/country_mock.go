// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/reference/country.go

// Package mock_reference is a generated GoMock package.
package mock_reference

import (
	reference "github.com/DancesportSoftware/das/businesslogic/reference"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICountryRepository is a mock of ICountryRepository interface
type MockICountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICountryRepositoryMockRecorder
}

// MockICountryRepositoryMockRecorder is the mock recorder for MockICountryRepository
type MockICountryRepositoryMockRecorder struct {
	mock *MockICountryRepository
}

// NewMockICountryRepository creates a new mock instance
func NewMockICountryRepository(ctrl *gomock.Controller) *MockICountryRepository {
	mock := &MockICountryRepository{ctrl: ctrl}
	mock.recorder = &MockICountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICountryRepository) EXPECT() *MockICountryRepositoryMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method
func (m *MockICountryRepository) CreateCountry(country *reference.Country) error {
	ret := m.ctrl.Call(m, "CreateCountry", country)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCountry indicates an expected call of CreateCountry
func (mr *MockICountryRepositoryMockRecorder) CreateCountry(country interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockICountryRepository)(nil).CreateCountry), country)
}

// SearchCountry mocks base method
func (m *MockICountryRepository) SearchCountry(criteria reference.SearchCountryCriteria) ([]reference.Country, error) {
	ret := m.ctrl.Call(m, "SearchCountry", criteria)
	ret0, _ := ret[0].([]reference.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCountry indicates an expected call of SearchCountry
func (mr *MockICountryRepositoryMockRecorder) SearchCountry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCountry", reflect.TypeOf((*MockICountryRepository)(nil).SearchCountry), criteria)
}

// DeleteCountry mocks base method
func (m *MockICountryRepository) DeleteCountry(country reference.Country) error {
	ret := m.ctrl.Call(m, "DeleteCountry", country)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCountry indicates an expected call of DeleteCountry
func (mr *MockICountryRepositoryMockRecorder) DeleteCountry(country interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCountry", reflect.TypeOf((*MockICountryRepository)(nil).DeleteCountry), country)
}

// UpdateCountry mocks base method
func (m *MockICountryRepository) UpdateCountry(country reference.Country) error {
	ret := m.ctrl.Call(m, "UpdateCountry", country)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCountry indicates an expected call of UpdateCountry
func (mr *MockICountryRepositoryMockRecorder) UpdateCountry(country interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCountry", reflect.TypeOf((*MockICountryRepository)(nil).UpdateCountry), country)
}
