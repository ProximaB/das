-- Competition Entry for individual Athlete
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_ATHLETE (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID) ON DELETE CASCADE,
  ATHLETE_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID) ON DELETE CASCADE,
  LEAD_INDICATOR BOOLEAN NOT NULL DEFAULT FALSE,
  LEAD_TAG INTEGER NOT NULL DEFAULT 101,
  CHECKIN_IND BOOLEAN NOT NULL DEFAULT FALSE, -- if user is not checked in, this is not count as entry
  CHECKIN_DATETIME TIMESTAMP,
  ORGANIZER_TAG TEXT,
  PAYMENT_IND BOOLEAN NOT NULL DEFAULT FALSE, -- if dancer has not paid registration, show as false
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, ATHLETE_ID)
);

CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (COMPETITION_ID);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (ATHLETE_ID);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (CHECKIN_IND);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (PAYMENT_IND);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (CREATE_USER_ID);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ATHLETE (UPDATE_USER_ID);

-- GET_ATHLETE_COMPETITION_ENTRIES_BY_COMPETITION retrieves all the athlete entries of a competition by competition ID
DROP FUNCTION IF EXISTS get_athlete_competition_entries_by_competition(compID INTEGER);
CREATE OR REPLACE FUNCTION get_athlete_competition_entries_by_competition(compID INTEGER)
RETURNS TABLE (
                ENTRY_ID INTEGER,
                COMPETITION_ID INTEGER,
                COMPETITION_NAME TEXT,
                COMPETITION_STATUS_ID INTEGER,
                ATHLETE_ID INTEGER,
                ATHLETE_FIRST_NAME VARCHAR(64),
                ATHLETE_LAST_NAME VARCHAR(64),
                ATHLETE_DATE_OF_BIRTH DATE,
                ATHLETE_GENDER_ID INTEGER,
                ENTRY_IS_LEAD BOOLEAN,
                ENTRY_LEAD_TAG INTEGER,
                ENTRY_ORGANIZER_NOTE TEXT,
                ENTRY_CHECKED_IN BOOLEAN,
                ENTRY_CHECKIN_TIME TIMESTAMP,
                ENTRY_IS_PAID BOOLEAN,
                ENTRY_CREATE_USER INTEGER,
                ENTRY_DATETIME_CREATED TIMESTAMP,
                ENTRY_UPDATE_USER INTEGER,
                ENTRY_DATETIME_UPDATED TIMESTAMP
              )
AS
$$
  BEGIN
    RETURN QUERY
      SELECT
             ENTRY.ID,
             ENTRY.COMPETITION_ID,
             COMP.NAME,
             COMP.STATUS_ID,
             ENTRY.ATHLETE_ID,
             ACCOUNT.FIRST_NAME,
             ACCOUNT.LAST_NAME,
             ACCOUNT.DATE_OF_BIRTH,
             ACCOUNT.USER_GENDER_ID,
             ENTRY.LEAD_INDICATOR,
             ENTRY.LEAD_TAG,
             ENTRY.ORGANIZER_NOTE,
             ENTRY.CHECKIN_IND,
             ENTRY.CHECKIN_DATETIME,
             ENTRY.PAYMENT_IND,
             ENTRY.CREATE_USER_ID,
             ENTRY.DATETIME_CREATED,
             ENTRY.UPDATE_USER_ID,
             ENTRY.DATETIME_UPDATED
      FROM DAS.COMPETITION_ENTRY_ATHLETE ENTRY
      JOIN DAS.COMPETITION COMP ON ENTRY.COMPETITION_ID = COMP.ID
      JOIN DAS.ACCOUNT ACCOUNT ON ENTRY.ATHLETE_ID = ACCOUNT.ID
      WHERE ENTRY.COMPETITION_ID = compID;
  END;
$$
  LANGUAGE PLPGSQL;

-- Competition Entry for Partnership
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_PARTNERSHIP (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID),
  PARTNERSHIP_ID INTEGER NOT NULL REFERENCES DAS.PARTNERSHIP (ID),
  CHECKIN_IND BOOLEAN NOT NULL DEFAULT FALSE, -- if user is not checked in, this is not count as entry
  CHECKIN_DATETIME TIMESTAMP,
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, PARTNERSHIP_ID)
);

CREATE INDEX ON DAS.COMPETITION_ENTRY_PARTNERSHIP (COMPETITION_ID);
CREATE INDEX ON DAS.COMPETITION_ENTRY_PARTNERSHIP (PARTNERSHIP_ID);


-- Competition Entry for Adjudicator
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_ADJUDICATOR (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID),
  ADJUDICATOR_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  CHECKIN_IND BOOLEAN NOT NULL DEFAULT FALSE, -- if user is not checked in, this is not count as entry
  CHECKIN_DATETIME TIMESTAMP,
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, ADJUDICATOR_ID)
);

CREATE INDEX ON DAS.COMPETITION_ENTRY_ADJUDICATOR (COMPETITION_ID);
CREATE INDEX ON DAS.COMPETITION_ENTRY_ADJUDICATOR (ADJUDICATOR_ID);


-- TODO: Competition Entry for Scrutineer
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_SCRUTINEER (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID),
  SCRUTINEER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, SCRUTINEER_ID)
);

-- TODO: Competition Entry for Deck Captain
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_DECK_CAPTAIN (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID),
  DECK_CAPTAIN_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, DECK_CAPTAIN_ID)
);

-- TODO: Competition Entry for Emcee
CREATE TABLE IF NOT EXISTS DAS.COMPETITION_ENTRY_EMCEE (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION (ID),
  EMCEE_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, EMCEE_ID)
);

CREATE TABLE IF NOT EXISTS DAS.COMPETITION_LEAD_TAG (
  ID SERIAL NOT NULL PRIMARY KEY,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION(ID),
  LEAD_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT(ID),
  TAG_NUMBER INTEGER NOT NULL DEFAULT 101,
  CREATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES DAS.ACCOUNT (ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE (COMPETITION_ID, LEAD_ID, TAG_NUMBER)
);

CREATE INDEX ON DAS.COMPETITION_LEAD_TAG (COMPETITION_ID);
CREATE INDEX ON DAS.COMPETITION_LEAD_TAG (LEAD_ID);
CREATE INDEX ON DAS.COMPETITION_LEAD_TAG (TAG_NUMBER);