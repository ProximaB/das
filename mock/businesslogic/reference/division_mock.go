// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/reference/division.go

// Package mock_reference is a generated GoMock package.
package mock_reference

import (
	"github.com/DancesportSoftware/das/businesslogic/reference"

	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIDivisionRepository is a mock of IDivisionRepository interface
type MockIDivisionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDivisionRepositoryMockRecorder
}

// MockIDivisionRepositoryMockRecorder is the mock recorder for MockIDivisionRepository
type MockIDivisionRepositoryMockRecorder struct {
	mock *MockIDivisionRepository
}

// NewMockIDivisionRepository creates a new mock instance
func NewMockIDivisionRepository(ctrl *gomock.Controller) *MockIDivisionRepository {
	mock := &MockIDivisionRepository{ctrl: ctrl}
	mock.recorder = &MockIDivisionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDivisionRepository) EXPECT() *MockIDivisionRepositoryMockRecorder {
	return m.recorder
}

// CreateDivision mocks base method
func (m *MockIDivisionRepository) CreateDivision(division *businesslogic.Division) error {
	ret := m.ctrl.Call(m, "CreateDivision", division)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDivision indicates an expected call of CreateDivision
func (mr *MockIDivisionRepositoryMockRecorder) CreateDivision(division interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDivision", reflect.TypeOf((*MockIDivisionRepository)(nil).CreateDivision), division)
}

// SearchDivision mocks base method
func (m *MockIDivisionRepository) SearchDivision(criteria businesslogic.SearchDivisionCriteria) ([]businesslogic.Division, error) {
	ret := m.ctrl.Call(m, "SearchDivision", criteria)
	ret0, _ := ret[0].([]businesslogic.Division)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDivision indicates an expected call of SearchDivision
func (mr *MockIDivisionRepositoryMockRecorder) SearchDivision(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDivision", reflect.TypeOf((*MockIDivisionRepository)(nil).SearchDivision), criteria)
}

// UpdateDivision mocks base method
func (m *MockIDivisionRepository) UpdateDivision(division businesslogic.Division) error {
	ret := m.ctrl.Call(m, "UpdateDivision", division)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDivision indicates an expected call of UpdateDivision
func (mr *MockIDivisionRepositoryMockRecorder) UpdateDivision(division interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDivision", reflect.TypeOf((*MockIDivisionRepository)(nil).UpdateDivision), division)
}

// DeleteDivision mocks base method
func (m *MockIDivisionRepository) DeleteDivision(division businesslogic.Division) error {
	ret := m.ctrl.Call(m, "DeleteDivision", division)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDivision indicates an expected call of DeleteDivision
func (mr *MockIDivisionRepositoryMockRecorder) DeleteDivision(division interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDivision", reflect.TypeOf((*MockIDivisionRepository)(nil).DeleteDivision), division)
}
