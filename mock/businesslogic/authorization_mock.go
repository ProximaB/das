// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/authorization.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockIAuthorizationService is a mock of IAuthorizationService interface
type MockIAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationServiceMockRecorder
}

// MockIAuthorizationServiceMockRecorder is the mock recorder for MockIAuthorizationService
type MockIAuthorizationServiceMockRecorder struct {
	mock *MockIAuthorizationService
}

// NewMockIAuthorizationService creates a new mock instance
func NewMockIAuthorizationService(ctrl *gomock.Controller) *MockIAuthorizationService {
	mock := &MockIAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAuthorizationService) EXPECT() *MockIAuthorizationServiceMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method
func (m *MockIAuthorizationService) AuthorizeUser() error {
	ret := m.ctrl.Call(m, "AuthorizeUser")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeUser indicates an expected call of AuthorizeUser
func (mr *MockIAuthorizationServiceMockRecorder) AuthorizeUser() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockIAuthorizationService)(nil).AuthorizeUser))
}
