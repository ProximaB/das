// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/competitionentry.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICompetitionEntryRepository is a mock of ICompetitionEntryRepository interface
type MockICompetitionEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompetitionEntryRepositoryMockRecorder
}

// MockICompetitionEntryRepositoryMockRecorder is the mock recorder for MockICompetitionEntryRepository
type MockICompetitionEntryRepositoryMockRecorder struct {
	mock *MockICompetitionEntryRepository
}

// NewMockICompetitionEntryRepository creates a new mock instance
func NewMockICompetitionEntryRepository(ctrl *gomock.Controller) *MockICompetitionEntryRepository {
	mock := &MockICompetitionEntryRepository{ctrl: ctrl}
	mock.recorder = &MockICompetitionEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICompetitionEntryRepository) EXPECT() *MockICompetitionEntryRepositoryMockRecorder {
	return m.recorder
}

// CreateCompetitionEntry mocks base method
func (m *MockICompetitionEntryRepository) CreateCompetitionEntry(entry *businesslogic.CompetitionEntry) error {
	ret := m.ctrl.Call(m, "CreateCompetitionEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompetitionEntry indicates an expected call of CreateCompetitionEntry
func (mr *MockICompetitionEntryRepositoryMockRecorder) CreateCompetitionEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetitionEntry", reflect.TypeOf((*MockICompetitionEntryRepository)(nil).CreateCompetitionEntry), entry)
}

// UpdateCompetitionEntry mocks base method
func (m *MockICompetitionEntryRepository) UpdateCompetitionEntry(entry businesslogic.CompetitionEntry) error {
	ret := m.ctrl.Call(m, "UpdateCompetitionEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompetitionEntry indicates an expected call of UpdateCompetitionEntry
func (mr *MockICompetitionEntryRepositoryMockRecorder) UpdateCompetitionEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompetitionEntry", reflect.TypeOf((*MockICompetitionEntryRepository)(nil).UpdateCompetitionEntry), entry)
}

// DeleteCompetitionEntry mocks base method
func (m *MockICompetitionEntryRepository) DeleteCompetitionEntry(entry businesslogic.CompetitionEntry) error {
	ret := m.ctrl.Call(m, "DeleteCompetitionEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompetitionEntry indicates an expected call of DeleteCompetitionEntry
func (mr *MockICompetitionEntryRepositoryMockRecorder) DeleteCompetitionEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompetitionEntry", reflect.TypeOf((*MockICompetitionEntryRepository)(nil).DeleteCompetitionEntry), entry)
}

// SearchCompetitionEntry mocks base method
func (m *MockICompetitionEntryRepository) SearchCompetitionEntry(criteria businesslogic.SearchCompetitionEntryCriteria) ([]businesslogic.CompetitionEntry, error) {
	ret := m.ctrl.Call(m, "SearchCompetitionEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.CompetitionEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCompetitionEntry indicates an expected call of SearchCompetitionEntry
func (mr *MockICompetitionEntryRepositoryMockRecorder) SearchCompetitionEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCompetitionEntry", reflect.TypeOf((*MockICompetitionEntryRepository)(nil).SearchCompetitionEntry), criteria)
}
