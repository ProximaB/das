// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/evententry_partnership.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPartnershipEventEntryRepository is a mock of IPartnershipEventEntryRepository interface
type MockIPartnershipEventEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartnershipEventEntryRepositoryMockRecorder
}

// MockIPartnershipEventEntryRepositoryMockRecorder is the mock recorder for MockIPartnershipEventEntryRepository
type MockIPartnershipEventEntryRepositoryMockRecorder struct {
	mock *MockIPartnershipEventEntryRepository
}

// NewMockIPartnershipEventEntryRepository creates a new mock instance
func NewMockIPartnershipEventEntryRepository(ctrl *gomock.Controller) *MockIPartnershipEventEntryRepository {
	mock := &MockIPartnershipEventEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIPartnershipEventEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartnershipEventEntryRepository) EXPECT() *MockIPartnershipEventEntryRepositoryMockRecorder {
	return m.recorder
}

// CreatePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) CreatePartnershipEventEntry(entry *businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "CreatePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartnershipEventEntry indicates an expected call of CreatePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) CreatePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).CreatePartnershipEventEntry), entry)
}

// DeletePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) DeletePartnershipEventEntry(entry businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "DeletePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnershipEventEntry indicates an expected call of DeletePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) DeletePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).DeletePartnershipEventEntry), entry)
}

// SearchPartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) SearchPartnershipEventEntry(criteria businesslogic.SearchPartnershipEventEntryCriteria) ([]businesslogic.PartnershipEventEntry, error) {
	ret := m.ctrl.Call(m, "SearchPartnershipEventEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.PartnershipEventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPartnershipEventEntry indicates an expected call of SearchPartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) SearchPartnershipEventEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).SearchPartnershipEventEntry), criteria)
}

// UpdatePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) UpdatePartnershipEventEntry(entry businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "UpdatePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartnershipEventEntry indicates an expected call of UpdatePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) UpdatePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).UpdatePartnershipEventEntry), entry)
}
