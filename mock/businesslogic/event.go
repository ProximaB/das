// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/event.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIEventRepository is a mock of IEventRepository interface
type MockIEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEventRepositoryMockRecorder
}

// MockIEventRepositoryMockRecorder is the mock recorder for MockIEventRepository
type MockIEventRepositoryMockRecorder struct {
	mock *MockIEventRepository
}

// NewMockIEventRepository creates a new mock instance
func NewMockIEventRepository(ctrl *gomock.Controller) *MockIEventRepository {
	mock := &MockIEventRepository{ctrl: ctrl}
	mock.recorder = &MockIEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventRepository) EXPECT() *MockIEventRepositoryMockRecorder {
	return m.recorder
}

// SearchEvent mocks base method
func (m *MockIEventRepository) SearchEvent(criteria *businesslogic.SearchEventCriteria) ([]businesslogic.Event, error) {
	ret := m.ctrl.Call(m, "SearchEvent", criteria)
	ret0, _ := ret[0].([]businesslogic.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvent indicates an expected call of SearchEvent
func (mr *MockIEventRepositoryMockRecorder) SearchEvent(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvent", reflect.TypeOf((*MockIEventRepository)(nil).SearchEvent), criteria)
}

// CreateEvent mocks base method
func (m *MockIEventRepository) CreateEvent(event *businesslogic.Event) error {
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockIEventRepositoryMockRecorder) CreateEvent(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockIEventRepository)(nil).CreateEvent), event)
}

// UpdateEvent mocks base method
func (m *MockIEventRepository) UpdateEvent(event businesslogic.Event) error {
	ret := m.ctrl.Call(m, "UpdateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockIEventRepositoryMockRecorder) UpdateEvent(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockIEventRepository)(nil).UpdateEvent), event)
}

// DeleteEvent mocks base method
func (m *MockIEventRepository) DeleteEvent(event businesslogic.Event) error {
	ret := m.ctrl.Call(m, "DeleteEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockIEventRepositoryMockRecorder) DeleteEvent(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockIEventRepository)(nil).DeleteEvent), event)
}
