// Dancesport Application System (DAS)
// Copyright (C) 2018 Yubing Hou
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package authentication_test

import (
	"github.com/DancesportSoftware/das/businesslogic"
	"github.com/DancesportSoftware/das/controller/util/authentication"
	"github.com/DancesportSoftware/das/mock/businesslogic"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"net/http"
	"testing"
)

func TestGenerateAuthenticationToken(t *testing.T) {
	email := "john.smith@email.com"
	firstName := "John"
	lastName := "Smith"
	uuid := "b8183ea5-aab2-4eba-81c4-bfe3334227d8"
	account := businesslogic.Account{
		Email:     email,
		FirstName: firstName,
		LastName:  lastName,
		UUID:      uuid,
	}
	token := authentication.GenerateAuthenticationToken(account)
	err := authentication.ValidateToken(token)
	assert.Nil(t, err, "should not get an error if token is generated by DAS")
}


func TestJWTAuthenticationStrategy_Authenticate(t *testing.T) {

	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	repo := mock_businesslogic.NewMockIAccountRepository(mockCtrl)
	repo.EXPECT().SearchAccount(gomock.Any()).Return([]businesslogic.Account{
		{ID: 1, FirstName: "John", LastName: "Smith"},
	}, nil)

	strategy := authentication.JWTAuthenticationStrategy{
		repo,
	}

	testToken := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvaG4uc21pdGhAZW1haWwuY29tIiwiZXhwIjoxNTMyMzAxMTg2LCJpc3N1ZWQiOjE1MzIwNDE5ODYsIm5hbWUiOiJKb2huIFNtaXRoIiwidXVpZCI6ImI4MTgzZWE1LWFhYjItNGViYS04MWM0LWJmZTMzMzQyMjdkOCJ9.GnDPv-GkVQMUMDmS2KCNpJaN4oTlbvaqFhM3XO99NPw"
	req, _ := http.NewRequest(http.MethodPost, "/api/vi/account/authenticate", nil)
	req.Header.Add("Authorization", "bearer " + testToken)
	account, err := strategy.Authenticate(req)
	assert.NotNil(t, account)
	assert.Nil(t, err)
}
