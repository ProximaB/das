-- one competition may host events of different federations
CREATE TABLE IF NOT EXISTS DAS.EVENT(
  ID SERIAL PRIMARY KEY NOT NULL,
  COMPETITION_ID INTEGER NOT NULL REFERENCES DAS.COMPETITION(ID),
  CATEGORY_ID INTEGER NOT NULL REFERENCES DAS.EVENT_CATEGORY(ID),
  FEDERATION_ID INTEGER NOT NULL REFERENCES DAS.FEDERATION (ID),
  DIVISION_ID INTEGER NOT NULL REFERENCES DAS.DIVISION(ID),
  AGE_ID INTEGER REFERENCES DAS.AGE (ID),
  PROFICIENCY_ID INTEGER REFERENCES DAS.PROFICIENCY (ID),
  STYLE_ID INTEGER NOT NULL REFERENCES DAS.STYLE(ID),
  DESCRIPTION TEXT,
  EVENT_STATUS_ID INTEGER NOT NULL REFERENCES DAS.EVENT_STATUS(ID),
  TOTAL_ENTRIES INTEGER NOT NULL DEFAULT 0, /* Can be updated through triggers */
  EVENT_DANCES INTEGER NOT NULL DEFAULT 0, /* Can be updated when event dance is updated */
  FLOOR_CAPACITY INTEGER NOT NULL DEFAULT 0, /* Used by Scrutineer to estimate number of heats for each round */
  RECALL_RATE INTEGER NOT NULL DEFAULT 50, /* Set by scrutineer or chairperson of judge */
  DANCE_DURATION INTEGER NOT NULL DEFAULT 90, /* Set by scrutineer or chairperson of judge */
  MISC_TIMELOSS INTEGER NOT NULL DEFAULT 0, /* Set by scrutineer or chairperson of judge */
  CREATE_USER_ID INTEGER NOT NULL REFERENCES  DAS.ACCOUNT(ID),
  DATETIME_CREATED TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATE_USER_ID INTEGER NOT NULL REFERENCES  DAS.ACCOUNT(ID),
  DATETIME_UPDATED TIMESTAMP NOT NULL DEFAULT NOW(),
  CHECK (RECALL_RATE > 1),
  CHECK (RECALL_RATE < 99)
);

CREATE INDEX ON DAS.EVENT (COMPETITION_ID);
CREATE INDEX ON DAS.EVENT (CREATE_USER_ID);
CREATE INDEX ON DAS.EVENT (FEDERATION_ID);
CREATE INDEX ON DAS.EVENT (DIVISION_ID);
CREATE INDEX ON DAS.EVENT (AGE_ID);
CREATE INDEX ON DAS.EVENT (PROFICIENCY_ID);
CREATE INDEX ON DAS.EVENT (STYLE_ID);

