// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/referencedal/school.go

// Package mock_reference is a generated GoMock package.
package mock_reference

import (
	reference "github.com/DancesportSoftware/das/businesslogic/reference"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockISchoolRepository is a mock of ISchoolRepository interface
type MockISchoolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISchoolRepositoryMockRecorder
}

// MockISchoolRepositoryMockRecorder is the mock recorder for MockISchoolRepository
type MockISchoolRepositoryMockRecorder struct {
	mock *MockISchoolRepository
}

// NewMockISchoolRepository creates a new mock instance
func NewMockISchoolRepository(ctrl *gomock.Controller) *MockISchoolRepository {
	mock := &MockISchoolRepository{ctrl: ctrl}
	mock.recorder = &MockISchoolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISchoolRepository) EXPECT() *MockISchoolRepositoryMockRecorder {
	return m.recorder
}

// CreateSchool mocks base method
func (m *MockISchoolRepository) CreateSchool(school *reference.School) error {
	ret := m.ctrl.Call(m, "CreateSchool", school)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchool indicates an expected call of CreateSchool
func (mr *MockISchoolRepositoryMockRecorder) CreateSchool(school interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchool", reflect.TypeOf((*MockISchoolRepository)(nil).CreateSchool), school)
}

// SearchSchool mocks base method
func (m *MockISchoolRepository) SearchSchool(criteria reference.SearchSchoolCriteria) ([]reference.School, error) {
	ret := m.ctrl.Call(m, "SearchSchool", criteria)
	ret0, _ := ret[0].([]reference.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSchool indicates an expected call of SearchSchool
func (mr *MockISchoolRepositoryMockRecorder) SearchSchool(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchool", reflect.TypeOf((*MockISchoolRepository)(nil).SearchSchool), criteria)
}

// UpdateSchool mocks base method
func (m *MockISchoolRepository) UpdateSchool(school reference.School) error {
	ret := m.ctrl.Call(m, "UpdateSchool", school)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchool indicates an expected call of UpdateSchool
func (mr *MockISchoolRepositoryMockRecorder) UpdateSchool(school interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchool", reflect.TypeOf((*MockISchoolRepository)(nil).UpdateSchool), school)
}

// DeleteSchool mocks base method
func (m *MockISchoolRepository) DeleteSchool(school reference.School) error {
	ret := m.ctrl.Call(m, "DeleteSchool", school)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchool indicates an expected call of DeleteSchool
func (mr *MockISchoolRepositoryMockRecorder) DeleteSchool(school interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchool", reflect.TypeOf((*MockISchoolRepository)(nil).DeleteSchool), school)
}
