// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/adjudicator_competition_entry.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAdjudicatorCompetitionEntryRepository is a mock of IAdjudicatorCompetitionEntryRepository interface
type MockIAdjudicatorCompetitionEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder
}

// MockIAdjudicatorCompetitionEntryRepositoryMockRecorder is the mock recorder for MockIAdjudicatorCompetitionEntryRepository
type MockIAdjudicatorCompetitionEntryRepositoryMockRecorder struct {
	mock *MockIAdjudicatorCompetitionEntryRepository
}

// NewMockIAdjudicatorCompetitionEntryRepository creates a new mock instance
func NewMockIAdjudicatorCompetitionEntryRepository(ctrl *gomock.Controller) *MockIAdjudicatorCompetitionEntryRepository {
	mock := &MockIAdjudicatorCompetitionEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIAdjudicatorCompetitionEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAdjudicatorCompetitionEntryRepository) EXPECT() *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder {
	return m.recorder
}

// CreateEntry mocks base method
func (m *MockIAdjudicatorCompetitionEntryRepository) CreateEntry(entry *businesslogic.AdjudicatorCompetitionEntry) error {
	ret := m.ctrl.Call(m, "CreateEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry
func (mr *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder) CreateEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockIAdjudicatorCompetitionEntryRepository)(nil).CreateEntry), entry)
}

// DeleteEntry mocks base method
func (m *MockIAdjudicatorCompetitionEntryRepository) DeleteEntry(entry businesslogic.AdjudicatorCompetitionEntry) error {
	ret := m.ctrl.Call(m, "DeleteEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry
func (mr *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder) DeleteEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockIAdjudicatorCompetitionEntryRepository)(nil).DeleteEntry), entry)
}

// SearchEntry mocks base method
func (m *MockIAdjudicatorCompetitionEntryRepository) SearchEntry(criteria businesslogic.SearchAdjudicatorCompetitionEntryCriteria) ([]businesslogic.AdjudicatorCompetitionEntry, error) {
	ret := m.ctrl.Call(m, "SearchEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.AdjudicatorCompetitionEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEntry indicates an expected call of SearchEntry
func (mr *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder) SearchEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEntry", reflect.TypeOf((*MockIAdjudicatorCompetitionEntryRepository)(nil).SearchEntry), criteria)
}

// UpdateEntry mocks base method
func (m *MockIAdjudicatorCompetitionEntryRepository) UpdateEntry(entry businesslogic.AdjudicatorCompetitionEntry) error {
	ret := m.ctrl.Call(m, "UpdateEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntry indicates an expected call of UpdateEntry
func (mr *MockIAdjudicatorCompetitionEntryRepositoryMockRecorder) UpdateEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntry", reflect.TypeOf((*MockIAdjudicatorCompetitionEntryRepository)(nil).UpdateEntry), entry)
}
