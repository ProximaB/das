// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/evententry.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/ProximaB/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAdjudicatorEventEntryRepository is a mock of IAdjudicatorEventEntryRepository interface
type MockIAdjudicatorEventEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdjudicatorEventEntryRepositoryMockRecorder
}

// MockIAdjudicatorEventEntryRepositoryMockRecorder is the mock recorder for MockIAdjudicatorEventEntryRepository
type MockIAdjudicatorEventEntryRepositoryMockRecorder struct {
	mock *MockIAdjudicatorEventEntryRepository
}

// NewMockIAdjudicatorEventEntryRepository creates a new mock instance
func NewMockIAdjudicatorEventEntryRepository(ctrl *gomock.Controller) *MockIAdjudicatorEventEntryRepository {
	mock := &MockIAdjudicatorEventEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIAdjudicatorEventEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAdjudicatorEventEntryRepository) EXPECT() *MockIAdjudicatorEventEntryRepositoryMockRecorder {
	return m.recorder
}

// CreateEventEntry mocks base method
func (m *MockIAdjudicatorEventEntryRepository) CreateEventEntry(entry *businesslogic.AdjudicatorEventEntry) error {
	ret := m.ctrl.Call(m, "CreateEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventEntry indicates an expected call of CreateEventEntry
func (mr *MockIAdjudicatorEventEntryRepositoryMockRecorder) CreateEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventEntry", reflect.TypeOf((*MockIAdjudicatorEventEntryRepository)(nil).CreateEventEntry), entry)
}

// DeleteEventEntry mocks base method
func (m *MockIAdjudicatorEventEntryRepository) DeleteEventEntry(entry businesslogic.AdjudicatorEventEntry) error {
	ret := m.ctrl.Call(m, "DeleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventEntry indicates an expected call of DeleteEventEntry
func (mr *MockIAdjudicatorEventEntryRepositoryMockRecorder) DeleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventEntry", reflect.TypeOf((*MockIAdjudicatorEventEntryRepository)(nil).DeleteEventEntry), entry)
}

// SearchEventEntry mocks base method
func (m *MockIAdjudicatorEventEntryRepository) SearchEventEntry(criteria businesslogic.SearchAdjudicatorEventEntryCriteria) ([]businesslogic.AdjudicatorEventEntry, error) {
	ret := m.ctrl.Call(m, "SearchEventEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.AdjudicatorEventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEventEntry indicates an expected call of SearchEventEntry
func (mr *MockIAdjudicatorEventEntryRepositoryMockRecorder) SearchEventEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEventEntry", reflect.TypeOf((*MockIAdjudicatorEventEntryRepository)(nil).SearchEventEntry), criteria)
}

// UpdateEventEntry mocks base method
func (m *MockIAdjudicatorEventEntryRepository) UpdateEventEntry(entry businesslogic.AdjudicatorEventEntry) error {
	ret := m.ctrl.Call(m, "UpdateEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventEntry indicates an expected call of UpdateEventEntry
func (mr *MockIAdjudicatorEventEntryRepositoryMockRecorder) UpdateEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventEntry", reflect.TypeOf((*MockIAdjudicatorEventEntryRepository)(nil).UpdateEventEntry), entry)
}

// MockIAthleteEventEntryRepository is a mock of IAthleteEventEntryRepository interface
type MockIAthleteEventEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAthleteEventEntryRepositoryMockRecorder
}

// MockIAthleteEventEntryRepositoryMockRecorder is the mock recorder for MockIAthleteEventEntryRepository
type MockIAthleteEventEntryRepositoryMockRecorder struct {
	mock *MockIAthleteEventEntryRepository
}

// NewMockIAthleteEventEntryRepository creates a new mock instance
func NewMockIAthleteEventEntryRepository(ctrl *gomock.Controller) *MockIAthleteEventEntryRepository {
	mock := &MockIAthleteEventEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIAthleteEventEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAthleteEventEntryRepository) EXPECT() *MockIAthleteEventEntryRepositoryMockRecorder {
	return m.recorder
}

// CreateAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) CreateAthleteEventEntry(entry *businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "CreateAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAthleteEventEntry indicates an expected call of CreateAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) CreateAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).CreateAthleteEventEntry), entry)
}

// DeleteAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) DeleteAthleteEventEntry(entry businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "DeleteAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAthleteEventEntry indicates an expected call of DeleteAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) DeleteAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).DeleteAthleteEventEntry), entry)
}

// SearchAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) SearchAthleteEventEntry(criteria businesslogic.SearchAthleteEventEntryCriteria) ([]businesslogic.AthleteEventEntry, error) {
	ret := m.ctrl.Call(m, "SearchAthleteEventEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.AthleteEventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAthleteEventEntry indicates an expected call of SearchAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) SearchAthleteEventEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).SearchAthleteEventEntry), criteria)
}

// UpdateAthleteEventEntry mocks base method
func (m *MockIAthleteEventEntryRepository) UpdateAthleteEventEntry(entry businesslogic.AthleteEventEntry) error {
	ret := m.ctrl.Call(m, "UpdateAthleteEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAthleteEventEntry indicates an expected call of UpdateAthleteEventEntry
func (mr *MockIAthleteEventEntryRepositoryMockRecorder) UpdateAthleteEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAthleteEventEntry", reflect.TypeOf((*MockIAthleteEventEntryRepository)(nil).UpdateAthleteEventEntry), entry)
}

// MockIPartnershipEventEntryRepository is a mock of IPartnershipEventEntryRepository interface
type MockIPartnershipEventEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartnershipEventEntryRepositoryMockRecorder
}

// MockIPartnershipEventEntryRepositoryMockRecorder is the mock recorder for MockIPartnershipEventEntryRepository
type MockIPartnershipEventEntryRepositoryMockRecorder struct {
	mock *MockIPartnershipEventEntryRepository
}

// NewMockIPartnershipEventEntryRepository creates a new mock instance
func NewMockIPartnershipEventEntryRepository(ctrl *gomock.Controller) *MockIPartnershipEventEntryRepository {
	mock := &MockIPartnershipEventEntryRepository{ctrl: ctrl}
	mock.recorder = &MockIPartnershipEventEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartnershipEventEntryRepository) EXPECT() *MockIPartnershipEventEntryRepositoryMockRecorder {
	return m.recorder
}

// CreatePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) CreatePartnershipEventEntry(entry *businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "CreatePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartnershipEventEntry indicates an expected call of CreatePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) CreatePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).CreatePartnershipEventEntry), entry)
}

// DeletePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) DeletePartnershipEventEntry(entry businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "DeletePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnershipEventEntry indicates an expected call of DeletePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) DeletePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).DeletePartnershipEventEntry), entry)
}

// SearchPartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) SearchPartnershipEventEntry(criteria businesslogic.SearchPartnershipEventEntryCriteria) ([]businesslogic.PartnershipEventEntry, error) {
	ret := m.ctrl.Call(m, "SearchPartnershipEventEntry", criteria)
	ret0, _ := ret[0].([]businesslogic.PartnershipEventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPartnershipEventEntry indicates an expected call of SearchPartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) SearchPartnershipEventEntry(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).SearchPartnershipEventEntry), criteria)
}

// UpdatePartnershipEventEntry mocks base method
func (m *MockIPartnershipEventEntryRepository) UpdatePartnershipEventEntry(entry businesslogic.PartnershipEventEntry) error {
	ret := m.ctrl.Call(m, "UpdatePartnershipEventEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartnershipEventEntry indicates an expected call of UpdatePartnershipEventEntry
func (mr *MockIPartnershipEventEntryRepositoryMockRecorder) UpdatePartnershipEventEntry(entry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnershipEventEntry", reflect.TypeOf((*MockIPartnershipEventEntryRepository)(nil).UpdatePartnershipEventEntry), entry)
}
