// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/partnership.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPartnershipRepository is a mock of IPartnershipRepository interface
type MockIPartnershipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartnershipRepositoryMockRecorder
}

// MockIPartnershipRepositoryMockRecorder is the mock recorder for MockIPartnershipRepository
type MockIPartnershipRepositoryMockRecorder struct {
	mock *MockIPartnershipRepository
}

// NewMockIPartnershipRepository creates a new mock instance
func NewMockIPartnershipRepository(ctrl *gomock.Controller) *MockIPartnershipRepository {
	mock := &MockIPartnershipRepository{ctrl: ctrl}
	mock.recorder = &MockIPartnershipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartnershipRepository) EXPECT() *MockIPartnershipRepositoryMockRecorder {
	return m.recorder
}

// CreatePartnership mocks base method
func (m *MockIPartnershipRepository) CreatePartnership(partnership *businesslogic.Partnership) error {
	ret := m.ctrl.Call(m, "CreatePartnership", partnership)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartnership indicates an expected call of CreatePartnership
func (mr *MockIPartnershipRepositoryMockRecorder) CreatePartnership(partnership interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnership", reflect.TypeOf((*MockIPartnershipRepository)(nil).CreatePartnership), partnership)
}

// SearchPartnership mocks base method
func (m *MockIPartnershipRepository) SearchPartnership(criteria businesslogic.SearchPartnershipCriteria) ([]businesslogic.Partnership, error) {
	ret := m.ctrl.Call(m, "SearchPartnership", criteria)
	ret0, _ := ret[0].([]businesslogic.Partnership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPartnership indicates an expected call of SearchPartnership
func (mr *MockIPartnershipRepositoryMockRecorder) SearchPartnership(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPartnership", reflect.TypeOf((*MockIPartnershipRepository)(nil).SearchPartnership), criteria)
}

// UpdatePartnership mocks base method
func (m *MockIPartnershipRepository) UpdatePartnership(partnership businesslogic.Partnership) error {
	ret := m.ctrl.Call(m, "UpdatePartnership", partnership)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartnership indicates an expected call of UpdatePartnership
func (mr *MockIPartnershipRepositoryMockRecorder) UpdatePartnership(partnership interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnership", reflect.TypeOf((*MockIPartnershipRepository)(nil).UpdatePartnership), partnership)
}

// DeletePartnership mocks base method
func (m *MockIPartnershipRepository) DeletePartnership(partnership businesslogic.Partnership) error {
	ret := m.ctrl.Call(m, "DeletePartnership", partnership)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnership indicates an expected call of DeletePartnership
func (mr *MockIPartnershipRepositoryMockRecorder) DeletePartnership(partnership interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnership", reflect.TypeOf((*MockIPartnershipRepository)(nil).DeletePartnership), partnership)
}
