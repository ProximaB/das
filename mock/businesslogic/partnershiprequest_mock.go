// Code generated by MockGen. DO NOT EDIT.
// Source: partnershiprequest.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	reflect "reflect"

	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
)

// MockIPartnershipRequestStatusRepository is a mock of IPartnershipRequestStatusRepository interface
type MockIPartnershipRequestStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartnershipRequestStatusRepositoryMockRecorder
}

// MockIPartnershipRequestStatusRepositoryMockRecorder is the mock recorder for MockIPartnershipRequestStatusRepository
type MockIPartnershipRequestStatusRepositoryMockRecorder struct {
	mock *MockIPartnershipRequestStatusRepository
}

// NewMockIPartnershipRequestStatusRepository creates a new mock instance
func NewMockIPartnershipRequestStatusRepository(ctrl *gomock.Controller) *MockIPartnershipRequestStatusRepository {
	mock := &MockIPartnershipRequestStatusRepository{ctrl: ctrl}
	mock.recorder = &MockIPartnershipRequestStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartnershipRequestStatusRepository) EXPECT() *MockIPartnershipRequestStatusRepositoryMockRecorder {
	return m.recorder
}

// GetPartnershipRequestStatus mocks base method
func (m *MockIPartnershipRequestStatusRepository) GetPartnershipRequestStatus() ([]businesslogic.PartnershipRequestStatus, error) {
	ret := m.ctrl.Call(m, "GetPartnershipRequestStatus")
	ret0, _ := ret[0].([]businesslogic.PartnershipRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnershipRequestStatus indicates an expected call of GetPartnershipRequestStatus
func (mr *MockIPartnershipRequestStatusRepositoryMockRecorder) GetPartnershipRequestStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnershipRequestStatus", reflect.TypeOf((*MockIPartnershipRequestStatusRepository)(nil).GetPartnershipRequestStatus))
}

// MockIPartnershipRequestRepository is a mock of IPartnershipRequestRepository interface
type MockIPartnershipRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartnershipRequestRepositoryMockRecorder
}

// MockIPartnershipRequestRepositoryMockRecorder is the mock recorder for MockIPartnershipRequestRepository
type MockIPartnershipRequestRepositoryMockRecorder struct {
	mock *MockIPartnershipRequestRepository
}

// NewMockIPartnershipRequestRepository creates a new mock instance
func NewMockIPartnershipRequestRepository(ctrl *gomock.Controller) *MockIPartnershipRequestRepository {
	mock := &MockIPartnershipRequestRepository{ctrl: ctrl}
	mock.recorder = &MockIPartnershipRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartnershipRequestRepository) EXPECT() *MockIPartnershipRequestRepositoryMockRecorder {
	return m.recorder
}

// CreatePartnershipRequest mocks base method
func (m *MockIPartnershipRequestRepository) CreatePartnershipRequest(request *businesslogic.PartnershipRequest) error {
	ret := m.ctrl.Call(m, "CreatePartnershipRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartnershipRequest indicates an expected call of CreatePartnershipRequest
func (mr *MockIPartnershipRequestRepositoryMockRecorder) CreatePartnershipRequest(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnershipRequest", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).CreatePartnershipRequest), request)
}

// SearchPartnershipRequest mocks base method
func (m *MockIPartnershipRequestRepository) SearchPartnershipRequest(criteria businesslogic.SearchPartnershipRequestCriteria) ([]businesslogic.PartnershipRequest, error) {
	ret := m.ctrl.Call(m, "SearchPartnershipRequest", criteria)
	ret0, _ := ret[0].([]businesslogic.PartnershipRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPartnershipRequest indicates an expected call of SearchPartnershipRequest
func (mr *MockIPartnershipRequestRepositoryMockRecorder) SearchPartnershipRequest(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPartnershipRequest", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).SearchPartnershipRequest), criteria)
}

// DeletePartnershipRequest mocks base method
func (m *MockIPartnershipRequestRepository) DeletePartnershipRequest(request businesslogic.PartnershipRequest) error {
	ret := m.ctrl.Call(m, "DeletePartnershipRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnershipRequest indicates an expected call of DeletePartnershipRequest
func (mr *MockIPartnershipRequestRepositoryMockRecorder) DeletePartnershipRequest(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnershipRequest", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).DeletePartnershipRequest), request)
}

// UpdatePartnershipRequest mocks base method
func (m *MockIPartnershipRequestRepository) UpdatePartnershipRequest(request businesslogic.PartnershipRequest) error {
	ret := m.ctrl.Call(m, "UpdatePartnershipRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartnershipRequest indicates an expected call of UpdatePartnershipRequest
func (mr *MockIPartnershipRequestRepositoryMockRecorder) UpdatePartnershipRequest(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnershipRequest", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).UpdatePartnershipRequest), request)
}

// GetReceivedRequests mocks base method
func (m *MockIPartnershipRequestRepository) GetReceivedRequests(recipientID int) ([]businesslogic.PartnershipRequest, error) {
	ret := m.ctrl.Call(m, "GetReceivedRequests", recipientID)
	ret0, _ := ret[0].([]businesslogic.PartnershipRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedRequests indicates an expected call of GetReceivedRequests
func (mr *MockIPartnershipRequestRepositoryMockRecorder) GetReceivedRequests(recipientID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedRequests", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).GetReceivedRequests), recipientID)
}

// GetSentRequests mocks base method
func (m *MockIPartnershipRequestRepository) GetSentRequests(senderID int) ([]businesslogic.PartnershipRequest, error) {
	ret := m.ctrl.Call(m, "GetSentRequests", senderID)
	ret0, _ := ret[0].([]businesslogic.PartnershipRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentRequests indicates an expected call of GetSentRequests
func (mr *MockIPartnershipRequestRepositoryMockRecorder) GetSentRequests(senderID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentRequests", reflect.TypeOf((*MockIPartnershipRequestRepository)(nil).GetSentRequests), senderID)
}
