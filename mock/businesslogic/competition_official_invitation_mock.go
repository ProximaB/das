// Code generated by MockGen. DO NOT EDIT.
// Source: ./businesslogic/competition_official_invitation.go

// Package mock_businesslogic is a generated GoMock package.
package mock_businesslogic

import (
	businesslogic "github.com/DancesportSoftware/das/businesslogic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICompetitionOfficialInvitationRepository is a mock of ICompetitionOfficialInvitationRepository interface
type MockICompetitionOfficialInvitationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompetitionOfficialInvitationRepositoryMockRecorder
}

// MockICompetitionOfficialInvitationRepositoryMockRecorder is the mock recorder for MockICompetitionOfficialInvitationRepository
type MockICompetitionOfficialInvitationRepositoryMockRecorder struct {
	mock *MockICompetitionOfficialInvitationRepository
}

// NewMockICompetitionOfficialInvitationRepository creates a new mock instance
func NewMockICompetitionOfficialInvitationRepository(ctrl *gomock.Controller) *MockICompetitionOfficialInvitationRepository {
	mock := &MockICompetitionOfficialInvitationRepository{ctrl: ctrl}
	mock.recorder = &MockICompetitionOfficialInvitationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICompetitionOfficialInvitationRepository) EXPECT() *MockICompetitionOfficialInvitationRepositoryMockRecorder {
	return m.recorder
}

// CreateCompetitionOfficialInvitationRepository mocks base method
func (m *MockICompetitionOfficialInvitationRepository) CreateCompetitionOfficialInvitationRepository(invitation *businesslogic.CompetitionOfficialInvitation) error {
	ret := m.ctrl.Call(m, "CreateCompetitionOfficialInvitationRepository", invitation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompetitionOfficialInvitationRepository indicates an expected call of CreateCompetitionOfficialInvitationRepository
func (mr *MockICompetitionOfficialInvitationRepositoryMockRecorder) CreateCompetitionOfficialInvitationRepository(invitation interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetitionOfficialInvitationRepository", reflect.TypeOf((*MockICompetitionOfficialInvitationRepository)(nil).CreateCompetitionOfficialInvitationRepository), invitation)
}

// DeleteCompetitionOfficialInvitationRepository mocks base method
func (m *MockICompetitionOfficialInvitationRepository) DeleteCompetitionOfficialInvitationRepository(invitation businesslogic.CompetitionOfficialInvitation) error {
	ret := m.ctrl.Call(m, "DeleteCompetitionOfficialInvitationRepository", invitation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompetitionOfficialInvitationRepository indicates an expected call of DeleteCompetitionOfficialInvitationRepository
func (mr *MockICompetitionOfficialInvitationRepositoryMockRecorder) DeleteCompetitionOfficialInvitationRepository(invitation interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompetitionOfficialInvitationRepository", reflect.TypeOf((*MockICompetitionOfficialInvitationRepository)(nil).DeleteCompetitionOfficialInvitationRepository), invitation)
}

// SearchCompetitionOfficialInvitationRepository mocks base method
func (m *MockICompetitionOfficialInvitationRepository) SearchCompetitionOfficialInvitationRepository(criteria businesslogic.SearchCompetitionOfficialInvitationCriteria) ([]businesslogic.CompetitionOfficialInvitation, error) {
	ret := m.ctrl.Call(m, "SearchCompetitionOfficialInvitationRepository", criteria)
	ret0, _ := ret[0].([]businesslogic.CompetitionOfficialInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCompetitionOfficialInvitationRepository indicates an expected call of SearchCompetitionOfficialInvitationRepository
func (mr *MockICompetitionOfficialInvitationRepositoryMockRecorder) SearchCompetitionOfficialInvitationRepository(criteria interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCompetitionOfficialInvitationRepository", reflect.TypeOf((*MockICompetitionOfficialInvitationRepository)(nil).SearchCompetitionOfficialInvitationRepository), criteria)
}

// UpdateCompetitionOfficialInvitationRepository mocks base method
func (m *MockICompetitionOfficialInvitationRepository) UpdateCompetitionOfficialInvitationRepository(invitation businesslogic.CompetitionOfficialInvitation) error {
	ret := m.ctrl.Call(m, "UpdateCompetitionOfficialInvitationRepository", invitation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompetitionOfficialInvitationRepository indicates an expected call of UpdateCompetitionOfficialInvitationRepository
func (mr *MockICompetitionOfficialInvitationRepositoryMockRecorder) UpdateCompetitionOfficialInvitationRepository(invitation interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompetitionOfficialInvitationRepository", reflect.TypeOf((*MockICompetitionOfficialInvitationRepository)(nil).UpdateCompetitionOfficialInvitationRepository), invitation)
}
